import { createContext, useEffect, useState } from "react";

const addCartItem = (cartItems, productToAdd) => {
    // 'productToAdd' is an object generated by the ProductCard component
    //find if cartItems contains a productToAdd

    const existingCartItem = cartItems.find(
        (cartItem) => cartItem.id === productToAdd.id
    );

    // if productToAdd is found then inc the qty return
    if (existingCartItem) {
        return cartItems.map((cartItem) =>
            cartItem.id === productToAdd.id
                ? { ...cartItem, quantity: cartItem.quantity + 1 }
                : cartItem
        );
    }
    //a new array with modified cartItems/new cart item
    return [...cartItems, { ...productToAdd, quantity: 1 }]; // when the cart is empty and you are adding item t0 cart
};

const removeCartItem = (cartItems, cartItemToRemove) => {
    //---------   assuming that the cartItems contains the productToRemove --------

    // find the cartitem that is to be removed i.e. existing item in the cart
    const existingCartItem = cartItems.find(
        (cartItem) => cartItem.id === cartItemToRemove.id
    );

    //check if quantity is equal to 1, if it is then that item should be removed from the cart
    if (existingCartItem.quantity === 1) {
        return cartItems.filter(cartItem => cartItem.id === cartItemToRemove.id)
    }
    // if the quantity is greater > 1 then 
        return cartItems.map((cartItem) =>
            cartItem.id === cartItemToRemove.id ?
            { ...cartItem, quantity: cartItem.quantity - 1 } : cartItem)
     
            // return [...cartItems, { ...cartItemToRemove, quantity: 1 }];



    // if (existingCartItem && existingCartItem.quantity > 1) {


    //     return cartItems.map((cartItem) =>
    //         cartItem.id === cartItemToRemove.id
    //             ? { ...cartItem, quantity: cartItem.quantity - 1 }
    //             : cartItem
    //     );
    // }
    // else {
    //     return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id)
    // }
}


const clearCartItem = (cartItems , cartItemToClear) => {
    return cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id)
}

export const CartContext = createContext({
    isCartOpen: false,
    setIsCartOpen: () => { },
    cartItems: [],
    addItemToCart: () => { },
    removeItemFromCart: () => { },
    clearItemFromCart:()=>{},
    cartCount: 0,
    cartTotal:0,
});
// product{id, name, imageUrl,}  cartItem{id, name, imageUrl, quantity}

export const CartProvider = ({ children }) => {
    const [isCartOpen, setIsCartOpen] = useState(false);
    const [cartItems, setCartItems] = useState([]);
    const [cartCount, setCartCount] = useState(0)
    const [cartTotal, setCartTotal] = useState(0)
    useEffect(() => {
        const newCartCount = cartItems.reduce(
            (total, cartItem) => total + cartItem.quantity, 0)
        setCartCount(newCartCount)
    }, [cartItems])

    useEffect(() => {
        const newCartTotal = cartItems.reduce(
            (total, cartItem) => total + cartItem.quantity * cartItem.price, 0)
        setCartTotal(newCartTotal)
    }, [cartItems])

    const addItemToCart = (productToAdd) => {
        setCartItems(addCartItem(cartItems, productToAdd));
    };

    const removeItemFromCart = (cartItemToRemove) => {
        setCartItems(removeCartItem(cartItems, cartItemToRemove))
    }
    const clearItemFromCart = (cartItemToClear) => {
        setCartItems(clearCartItem(cartItems, cartItemToClear))
    }
    const value = {clearItemFromCart, 
            cartCount, 
            isCartOpen,
            setIsCartOpen, 
            addItemToCart, 
            removeItemFromCart, 
            cartItems,
            cartTotal };

    return <CartContext.Provider value={value}>{children}</CartContext.Provider>;
};
